# Ricart-Agrawala Token based Algorithm

# Import libraries
import sys
import random
import itertools


# Ricart-Agrawala Process class
class RAToken(DistProcess):
    
    # Constructor for initializing variables
    def setup(reqProcess,processList,processRequestCnt,initial_tokenvalue):

        ts = 0  
        process_Id =  self._id
        processRequest_TS = dict.fromkeys(processList,0)
        token_Assign_TS  = dict.fromkeys(processList,0)
        token_present = initial_tokenvalue
        token_held = False
        processList = processList
        reqProcess = reqProcess
        requestCount = processRequestCnt
        requestNo = 0


    # Critical section
    def cs(task):       
        
        --start
        ts += 1
        
        # Request for token if not holding it
        if(not(token_present)):
            output(REQUESTING +'Process Id: ' + (str(process_Id)) + ' Request No: '+(str(requestNo)) + (' REQUESTING CS') + EXIT)
            processRequest_TS[process_Id] = ts
            send(Request(ts), reqProcess)
        
        --await
        await(token_present == True) 
        token_Assign_TS[process_Id] = ts          
        
        token_held =   True
        --cs
        task()  
     
        --release
        output(LEAVING +'Process Id: ' + (str(process_Id)) + ' Request No: '+(str(requestNo)) + (' LEAVING CS') + EXIT)
        release()
        
     
    # Main fn of class which sends no of requests alloted to it 
    def main():
        
        def anounce():
            output(ENTERING +'Process Id: ' + (str(process_Id)) + ' Request No: '+(str(requestNo)) + (' ENTERING CS') + EXIT)
        
        for i in range(1,requestCount+1):
            requestNo = i
            cs(anounce)
        
        --await
        await(token_present == False)


    # OnRequest from other process sets the timestamp of the process.
    def OnRequest(tstest):
        
        processRequest_TS[_source] = max(processRequest_TS[_source] , tstest)
        if (token_present == True and token_held == False):
            release()
            

    # Assigns Token
    def OnToken(ftoken_Assign_TS):
       
        token_present = True
        token_Assign_TS = ftoken_Assign_TS
        
        
    # Releases token
    def release():
          
        token_Assign_TS[process_Id] = int(ts)
        token_held = False
        index = processList.index(process_Id)
        
        for i in itertools.chain(range(index+1,len(processList)),range(0,index-1)):
            
            if(processRequest_TS[processList[i]] > token_Assign_TS[processList[i]]):
                
                token_present = False
                #output(GRANTING +'Process Id: ' + (str(process_Id)) + (' SENDS TOKEN TO Process Id: ')+(str(processList[i])) + EXIT)
                send(Token(token_Assign_TS),processList[i])
                break
                


	

